var Promise = require('bluebird');
var nunjucks = require('nunjucks');
var moment = require('moment');

var q = require('q');
var qfs = require('./lib/qfs');

/*
nunjucks.configure(__dirname, {
  watch: false,
  noCache:true
});

hexo.extend.tag.register('gitchart', function(args) {

  var payload = {
    lang: 'javascript',
    lastDate: '2016-07-22'
  };

  console.log('eins')
  console.log('zwei')
  console.log('drei!')

  return new Promise(function (resolve, reject) {
    nunjucks.render('chart.html', payload, function (err, res) {
      if (err) {
        return reject(err);
      }
      resolve(res);
    });
  });
}, {async: true});
*/

var getDataFromFiles = function(lang, period, lastDate){

    var deferred = q.defer();

    var dirname = './json/' + lang + '-' + period;

    qfs.fileExists(dirname)
    .then(function(){

        var days = [];

        lastDate = moment(lastDate);

        days.push(moment(lastDate));

        for(var i = 0; i < 7; i += 1){
            days.push(moment(lastDate.subtract(1, 'days')));
        }

        days.reverse();

        var promises = [];
        days.forEach(function(day){
            promises.push(
                qfs.readFile(dirname + '/' + day.format('YYYY-MM-DD') + '.json') 
            );
        });

        q.all(promises)
        .then(function(datas){

            var json = [];

            datas.forEach(function(data){
                json.push(JSON.parse(data));
            });

            var compareByDate = function (a, b) {

                if (a[0].date < b[0].date) {
                    return -1;
                }
                if (a[0].date > b[0].date) {
                    return 1;
                }
                // a must be equal to b
                return 0;
            };
            json.sort(compareByDate);
            deferred.resolve(json);
        })
        .fail(function(){
            deferred.reject();
        })

    })
    .fail(function(){
        deferred.reject();
    })

    return deferred.promise;

};

var getData = function(lang, period, lastDate){

    var deferred = q.defer();

    getDataFromFiles(lang, period, lastDate)
    .then(function(data){
        console.log(data);
    });

    return deferred.promise;

};

getData('javascript', 'daily', '2016-07-22')
.then(function(data){
    console.log(data);
})


