var Promise = require('bluebird');
var nunjucks = require('nunjucks');
var moment = require('moment');

var q = require('q');
var qfs = require('./lib/qfs');

nunjucks.configure(__dirname, {
  watch: false,
  noCache:true
});

var getNumberOfDataSets = function(period){
    if('daily' === period){
        return 7;
    }
};

var getDataFromFiles = function(lang, period, lastDate){

    var deferred = q.defer();

    var dirname = './json/' + lang + '-' + period;

    qfs.fileExists(dirname)
    .then(function(){

        var days = [];

        lastDate = moment(lastDate);

        days.push(moment(lastDate));

        var numberOfDataSets = getNumberOfDataSets(period);

        for(var i = 0; i < numberOfDataSets; i += 1){
            days.push(moment(lastDate.subtract(1, 'days')));
        }

        days.reverse();

        var promises = [];
        days.forEach(function(day){
            promises.push(
                qfs.readFile(dirname + '/' + day.format('YYYY-MM-DD') + '.json') 
            );
        });

        q.all(promises)
        .then(function(datas){

            var json = [];

            datas.forEach(function(data){
                json.push(JSON.parse(data));
            });

            var compareByDate = function (a, b) {

                if (a[0].date < b[0].date) {
                    return -1;
                }
                if (a[0].date > b[0].date) {
                    return 1;
                }
                // a must be equal to b
                return 0;
            };
            json.sort(compareByDate);
            deferred.resolve(json);
        })
        .fail(function(){
            deferred.reject();
        })

    })
    .fail(function(){
        deferred.reject();
    })

    return deferred.promise;

};

var formatDate = function(data){

    data.forEach(function(day){
        day.forEach(function(repo){
            repo.date = moment(repo.date).format('YYYY-MM-DD')
        });
    });

    return data;
};

var getData = function(lang, period, lastDate){

    var deferred = q.defer();

    getDataFromFiles(lang, period, lastDate)
    .then(function(data){

        formatDate(data);

        lastDate = moment(lastDate).format('YYYY-MM-DD');


        var days = [];
        var repos = {}
        
        data.forEach(function(day){
            days.push(day[0].date);
        });

        data.forEach(function(day){
            day.forEach(function(repo){

                if(undefined === repos[repo.url]){
                    repos[repo.url] = {}
                }

                repos[repo.url][repo.date] = {
                    stars: repo.stars,
                    position: repo.position
                };
            });
        });

        days.forEach(function(day){
            for(var repo in repos){
                if(undefined === repos[repo][day]){
                    repos[repo][day] = {
                        position: '',
                        stars: ''
                    };
                }
            }
        });

        var tplData = {
            days: days.join(','),
            repos: []
        };

        for(var repoName in repos){

            var repo = {
                name: repoName,
                href: 'https://github.com/' + repoName,
                position: [],
                stars: [],
                hidden: false
            };

            if('' === repos[repoName][lastDate].position){
                repo.hidden = true;
            }

            days.forEach(function(day){

                repo.position.push(repos[repoName][day].position);
                repo.stars.push(repos[repoName][day].stars);                    

                
            });

            tplData.repos.push(repo);            

        }

        var sortByLastPosition = function (a, b) {
            a = a.position[(a.position.length-1)];
            b = b.position[(b.position.length-1)];

            if('' === a){
                a = 9999;
            }

            if('' === b){
                b = 9999;
            }

            if (a > b) {
                return -1;
            }
            if (a < b) {
                return 1;
            }
            // a must be equal to b
            return 0;
        }

        tplData.repos.sort(sortByLastPosition);

        tplData.repos.reverse();

        for(var i = 0; i < tplData.repos.length; i += 1){

            tplData.repos[i].position = tplData.repos[i].position.join(',');
            tplData.repos[i].stars = tplData.repos[i].stars.join(',');

        }        

        deferred.resolve(tplData);
    });

    return deferred.promise;

};

getData('javascript', 'daily', '2016-07-26')
.then(function(data){

        nunjucks.render('chart.html', data, function (err, res) {
          if (err) {
            console.log(err)
          }
          console.log(res)
        });

})


/*
hexo.extend.tag.register('gitchart', function(args) {

  var payload = {
    lang: 'javascript',
    lastDate: '2016-07-22'
  };

  return new Promise(function (resolve, reject) {

    getData('javascript', 'daily', '2016-07-26')
    .then(function(data){

        nunjucks.render('chart.html', data, function (err, res) {
          if (err) {
            return reject(err);
          }
          resolve(res);
        });


    });


  });
}, {async: true});

*/

